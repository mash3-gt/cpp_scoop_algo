{
	// Place your cpp_wsl_atcoder workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"initial template": {
		"prefix": "init",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"int main(){",
			"int n;",
			"cin >> n ;",
			"cout << n << endl;",
			"return 0;}"
		],
		"description": ""
	},
	"type": {
		"prefix": "type",
		"body": [
			"int",
			"bool",
			"string",
			"char",
			"vector<int> mem(4, 0); // [0,0,0,0]"
		],
		"description": ""
	},
	"map": {
		"prefix": "map",
		"body": [
			"map<string, int> cmap;",
			"cmap[i]++"
		],
		"description": ""
	},
	"sort_cheat": {
		"prefix": "sort_cheat",
		"body": [
			"string s = hoge;",
			"sort(s.begin(),s.end()); //昇順",
			"sort(S.begin(), S.end(), greater<char>()); //降順"
		]
	},
	"while_cheat": {
		"prefix": "while_cheat",
		"body": [
			"while (n > 0){",
			"    n /= 10;",
			"}"
		]
	},
	"find_cheat": {
		"prefix": "find_cheat",
		"body": [
			"s.find('A') != string::npos // Aを含まないとき"
		]
	}
}